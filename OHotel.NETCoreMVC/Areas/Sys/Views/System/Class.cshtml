@{
    //ViewData["Title"] = "";
}

<main class="app-content" id="ClassVue">
    <!-- 所在位置 -->
    <div class="app-title">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">系統管理&nbsp;</li>
            <li class="breadcrumb-item active">管理項目主類別{{ breadcrumb[contentNow] }}</li>
        </ol>
    </div>
    <!-- 所在位置 end-->
    <!-- 內容 -->
    <div class=" tile">
        <div class="tabs mt-none">
            <div v-if="(contentNow==1)&& (PV==1)">
                @* 主要 *@
                <ul class="nav nav-tabs nav-justifie">
                    <li class="active" @@click="content(1)"><a href="#list" data-toggle="tab"><i class="fa fa-list"></i>列表</a></li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane fade in active clearfix" id="home">
                        <!-- form -->
                        <div class="form-horizontal" id="form1" method="post" name="form1">
                            <div class="row">
                                <div class="form-group row col-md-3">
                                    <label class="control-label col-md-3">搜尋</label>
                                    <div class="col-md-9">
                                        <input class="form-control" type="text" id="SerchContent" name="SerchContent" placeholder="搜尋" v-model="searchItem">
                                    </div>
                                </div>
                                <div class="form-group row col-md-3">
                                    <label class="control-label col-md-3">
                                        搜尋欄位
                                    </label>
                                    <div class="col-md-9">
                                        <select class="form-control" id="SerchKey" name="SerchKey" :value="searchColumn" @@change="searchColumn = $event.target.value">
                                            <option value="MCName">名稱</option>
                                            <option value="[Order]">排序</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group row col-md-3">
                                    <div class="col-md-6">
                                        <button class="btn btn-primary viewimage" @@click="getDataPaged(1, searchItem, searchColumn)">
                                            <i class="fa fa-search"></i>查詢
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="form-horizontal row form-inline md" id="tabletop">
                                <div class="col-sm-6">
                                    <div class="padl">
                                        <template v-if="(PD==1)"><input type="checkbox" id="checkAll" @@click="checkAll();">全選</template>
                                        <button class="btn btn-danger deldata ml1" type="button" @@click="deleteSelected" v-if="(PD==1)"><i class="fa fa-remove"></i>刪除</button>
                                        <button class="btn btn-success ml1" type="button" @@click="content(2)" v-if="(PA==1)"><i class="fa fa-plus-square-o"></i>新增</button>
                                        <button type="button" class="btn btn-info ml1" id="FastOrder" data-toggle="modal" data-target="#exampleModal"><i class="fa fa-reorder"></i>快速排序</button>
                                    </div>
                                </div>
                            </div>
                            <table class="table rwd-table">
                                <thead>
                                    <tr>
                                        <th class="col-md-1"></th>
                                        <th class="col-md-1" v-if="(PU==1)">操作</th>
                                        <th class="col-md-1"><a href="javascript:void(0)" @@click="sortBy('MCNo')"><i class="fa fa-fw fa-sort"></i>編號</a></th>
                                        <th>標題</th>
                                        <th>控制器名</th>
                                        <th>顯示ICON</th>
                                        <th><a href="javascript:void(0)" @@click="sortBy('MTime')"><i class="fa fa-fw fa-sort"></i>異動時間</a></th>
                                        <th>
                                            <a href="javascript:void(0)" @@click="sortBy('%5BOrder%5D')">
                                                <i class="fa fa-fw fa-sort"></i>
                                                排序
                                            </a>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="(item, index) in RenderingData" :key="index">
                                        <td data-th="刪除"><input name="del_code" class="del_code" type="checkbox" :value=`${item.MCNo}` v-model="selectedItems" v-if="(PD==1)"></td>
                                        <td data-th="操作" v-if="(PU==1)"><a class="btn btn-success" title="編輯" @@click="content(3, item.MCNo)"><i class="fa fa-edit"></i>編輯</a></td>
                                        <td data-th="編號" @@click="getManageClassSingle(item.MCNo)">{{item.MCNo}}</td>
                                        <td data-th="類別名稱">{{item.MCName}}</td>
                                        <td data-th="控制器名">{{item.MCXtrol}}</td>
                                        <td data-th="顯示ICON"><i class="app-menu__icon" :class=`${item.MCIcon}`></i></td>
                                        <td data-th="發佈時間">{{formatTime(item.MTime)}}</td>
                                        <td data-th="排序">{{item.Order}}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <!-- form -->
                        <!-- pagination -->
                        <ul class="pagination" v-if="pageTotal && pageTotal.CurrentPage !== undefined">
                            <li v-if="pageTotal.CurrentPage > 1"><a href="javascript:void(0)" @@click="goToPage(pageNow - 1)">上一頁</a></li>
                            <li v-for="page in generatePagination()" :class="{ active: page === pageNow }">
                                <a href="javascript:void(0)" @@click="goToPage(page)">{{ page }}</a>
                            </li>
                            <li v-if="pageTotal.CurrentPage < pageTotal.TotalPages"><a href="javascript:void(0)" @@click="goToPage(pageNow + 1)">下一頁</a></li>
                            <li class="number">第{{pageNow}}/{{pageTotal.TotalPages}}頁  共{{pageTotal.TotalCount}}筆記錄</li>
                        </ul>
                        <!-- pagination -->
                    </div>
                </div>
            </div>
            <div v-if="(contentNow==2)&& (PA==1)">
                @* 新增 *@
                <div class="tile-body">
                    <form class="form-horizontal mt2" name="form1" id="form1" method="post">
                        <input type="hidden" name="AVG" value="&amp;">
                        <input type="hidden" name="flag" value="A">
                        <div class="form-group row">
                            <label class="control-label col-md-3">主類別名稱</label>
                            <div class="col-md-8">
                                <input class="form-control" type="text" placeholder="主類別名稱" v-model="addData.mCName">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-3">控制器命名(英文)</label>
                            <div class="col-md-8">
                                <input class="form-control" type="text" placeholder="請輸入英文" v-model="addData.mCXtrol">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-3">顯示圖示</label>
                            <div class="col-md-8">
                                <input type="radio" name="ICON" class="ICON" value="fa fa-cog" v-model="addData.mCIcon"><i class="app-menu__icon fa fa-cog"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-bullhorn" v-model="addData.mCIcon"><i class="app-menu__icon fa fa-bullhorn"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-bed" v-model="addData.mCIcon"><i class="app-menu__icon fa fa-bed"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-cutlery" v-model="addData.mCIcon"><i class="app-menu__icon fa fa-cutlery"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-building-o" v-model="addData.mCIcon"><i class="app-menu__icon fa fa-building-o"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-phone" v-model="addData.mCIcon"><i class="app-menu__icon fa fa-phone"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-file-text" v-model="addData.mCIcon"><i class="app-menu__icon fa fa-file-text"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-user" v-model="addData.mCIcon"><i class="app-menu__icon fa fa-user"></i>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-3">排序</label>
                            <div class="col-md-8">
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="排序" value="0" v-model="addData.order">
                                    <span class="input-group-addon">數值越小越前面</span>
                                </div>
                            </div>
                        </div>

                    </form>
                    <div class="tile-footer">
                        <div class="padl" align="center">
                            <button class="btn btn-primary" type="button" id="CheckSave" @@click="create"><i class="fa fa-save">儲存</i></button>
                            <button class="btn btn-warning ml1" type="button" @@click="content(1)"><i class="fa fa-th-list">返回列表</i></button>
                        </div>
                    </div>

                </div>
            </div>
            <div v-if="(contentNow==3)&& (PU==1)">
                @* 編輯 *@
                <div class="tile-body">
                    <form class="form-horizontal mt2" name="form1" id="form1" method="post">
                        <input type="hidden" name="AVG" value="&amp;">
                        <input type="hidden" name="flag" value="A">
                        <div class="form-group row">
                            <label class="control-label col-md-3">主類別名稱</label>
                            <div class="col-md-8">
                                <input class="form-control" type="text" placeholder="主類別名稱" v-model="editData[0].MCName">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-3">控制器命名(英文)</label>
                            <div class="col-md-8">
                                <input class="form-control" type="text" placeholder="請輸入英文" v-model="editData[0].MCXtrol">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-3">顯示圖示</label>
                            <div class="col-md-8">
                                <input type="radio" name="ICON" class="ICON" value="fa fa-cog" v-model="editData[0].MCIcon"><i class="app-menu__icon fa fa-cog"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-bullhorn" v-model="editData[0].MCIcon"><i class="app-menu__icon fa fa-bullhorn"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-bed" v-model="editData[0].MCIcon"><i class="app-menu__icon fa fa-bed"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-cutlery" v-model="editData[0].MCIcon"><i class="app-menu__icon fa fa-cutlery"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-building-o" v-model="editData[0].MCIcon"><i class="app-menu__icon fa fa-building-o"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-phone" v-model="editData[0].MCIcon"><i class="app-menu__icon fa fa-phone"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-file-text" v-model="editData[0].MCIcon"><i class="app-menu__icon fa fa-file-text"></i>
                                <input type="radio" name="ICON" class="ICON" value="fa fa-user" v-model="editData[0].MCIcon"><i class="app-menu__icon fa fa-user"></i>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-3">排序</label>
                            <div class="col-md-8">
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="排序" value="0" v-model="editData[0].Order">
                                    <span class="input-group-addon">數值越小越前面</span>
                                </div>
                            </div>
                        </div>
                    </form>
                    <div class="tile-footer">
                        <div class="padl" align="center">
                            <button class="btn btn-primary" type="button" id="CheckSave" @@click="update"><i class="fa fa-save">儲存</i></button>
                            <button class="btn btn-warning ml1" type="button" @@click="content(1)"><i class="fa fa-th-list">返回列表</i></button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title text-center">管理項目主類別快速排序</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <div class="modal-title text-center">
                        <input type="button" value="往上移動" class="btn btn-default" id="list_up">
                        <input type="button" value="往下移動" class="btn btn-default" id="list_down">
                    </div>
                </div>
                <div class="modal-body text-center">
                    <div id="scroll_list">
                        <ul class="list-group text-left">
                            <li class="list-group-item order_li" id="order_1" data-no="1" v-for="(item, index) in RenderingData" :key="index">{{item.MCName}}</li>
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" id="order_ok">確認</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">取消</button>
                </div>
            </div>
        </div>
    </div>
</main>

@section Scripts{
    <script>
        // 【 System/Class.cshtml 】
        const ClassVue = Vue.createApp({
            data() {
                return {
                    // 主要顯示資料存放區 //
                    RenderingData: null,
                    // 現在頁面 & 導覽列  //
                    contentNow: 1,
                    breadcrumb: {
                        1: '',
                        2: '-新增',
                        3: '-修改',
                    },
                    //   新增 & 編輯   //
                    addData: {},
                    editData: {},
                    editMCNo: null,
                    //  放在  AXIOS 傳遞 //
                    pageSize: 4, //一頁幾筆資料
                    pageNow: 1,
                    Sort: 'ASC',
                    Column: '%5BOrder%5D',
                    /* ------------------ */
                    pageTotal: null,
                    selectedItems: [],
                    /* ------------------ */
                    PV: 0, PA: 0, PD: 0, PU: 0, PG: 0, P1: 0, P2: 0, // 預設權限值
                };
            },
            created() {
                // 設置預設值
                this.addData.mCIcon = 'fa fa-cog';
                this.addData.order = '0';
            },
            mounted() {
                let _this = this;
                //_this.linkGetPage();
                _this.getPermissionValue('PV');
                _this.getPermissionValue('PA');
                _this.getPermissionValue('PD');
                _this.getPermissionValue('PU');
                _this.getPermissionValue('PG');
                _this.getPermissionValue('P1');
                _this.getPermissionValue('P2');
            },
            methods: {
                // << 獲得登入會員權限 >>
                getPermissionValue(permiss, minNo = '1') {
                    const token = localStorage.getItem('Token');
                    axios.get(`/api/AccountLogin/GetUserInfo`, {
                        headers: {
                            "Authorization": `Bearer ${token}`
                        }
                    })
                        .then(response => {
                            const STNo = response.data.STNo;
                            axios.get(`/api/AccountLogin/GetStaffPermissions/${STNo}`, {
                                headers: {
                                    "Authorization": `Bearer ${token}`
                                }
                            })
                                .then(response => {
                                    const permissions = response.data;
                                    const permission = permissions.find(p => p.MINo === parseInt(minNo, 10));
                                    if (permission) {
                                        this.permissionValue = permission
                                        this.$data[permiss] = this.permissionValue[permiss];

                                        if (this.PV == 1) { // 判斷是否有檢視權限 -> 渲染頁面
                                            this.getDataPaged(this.pageNow);
                                        }
                                    } else {
                                        this.permissionValue = null;
                                        this.$data[permiss] = this.permissionValue;
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                });
                        })
                        .catch(error => {
                            console.log(error);
                        });
                },
                // ----------------------------------------------------
                // << 搜尋 & 資料渲染(分頁) >>
                getDataPaged(pageNow, searchItem = '', searchColumn = 'MCName') {
                    // 中文、英文以外空格、特殊符號都刪除
                    searchItem = searchItem.replace(/[^\w\s\u4e00-\u9fa5]/gi, '').replace(/\s+/g, ' ').trim();

                    let apiUrl = `/api/SystemClass/GetPaged?`;
                    if (searchItem === '') {
                        apiUrl += `page=${pageNow}&pageSize=${this.pageSize}&selectFrom=ManageClass&orderBy=${this.Column}%20${this.Sort}`;
                    } else {
                        apiUrl += `search=${searchItem}&column=${searchColumn}&page=${pageNow}&pageSize=${this.pageSize}&selectFrom=ManageClass&orderBy=${this.Column}%20${this.Sort}`;
                    }
                    axios.get(apiUrl, {
                        headers: {
                            "Authorization": `Bearer ${token}`
                        }
                    })
                        .then(response => {
                            this.pageTotal = response.data.Paging;
                            this.RenderingData = response.data.Data;
                            this.searchItem = searchItem;
                            this.searchColumn = searchColumn;
                            this.pageNow = pageNow;
                        })
                        .catch(() => {
                            console.clear(); // Just for C
                        });
                },
                // << 切換分頁 >>
                goToPage(page) {
                    if (this.searchItem === '') {
                        this.getDataPaged(page);
                    } else {
                        this.getDataPaged(page, this.searchItem, this.searchColumn);
                    }
                    // 切換分頁時取消全選
                    let checkAll = document.getElementById("checkAll");
                    checkAll.checked = false;
                    this.checkAll(); // 調用checkAll方法，將複選框狀態更新到selectedItems陣列。
                },
                // --------------------------- 新刪修 資料夾/檔案 ----------------------------------
                //// [ 建立新資料夾至 Views ]
                //CreateFolder(folderName) {
                //    axios.post(`/api/Tools/CreateFolder/${folderName}`)
                //},
                //// [ 創建`{folderName}Controller.cs`至 Controllers 裡 ]
                //CreateControllerFile(folderName) {
                //    axios.post(`/api/Tools/CreateControllerFile/${folderName}`)
                //},
                //// [ 更改 Views 裡現有的資料夾名稱 ]
                //EditFolderName(oldFolderName = 'Cacoo', newFolderName = 'Popiiii') {
                //    axios.patch(`/api/Tools/EditFolderName/${oldFolderName}/${newFolderName}`)
                //},
                //// [ 查看 Views 裡是否有${folderName}資料夾 ]
                //CheckFolderExists(folderName = 'HappyDog') {
                //    axios.get(`/api/Tools/CheckFolderExists/${folderName}`)
                //        .then(response => {
                //            console.log(folderName + "資料夾存在嗎?: " + response.data);
                //        })
                //        .catch(error => {
                //            console.error(error);
                //        });
                //},
                // --------------------------------------------------------------------------------
                // [ 資料排序 ]
                sortBy(column) {
                    let _this = this;
                    if (_this.Sort === 'DESC') {
                        _this.Sort = 'ASC';
                    } else {
                        _this.Sort = 'DESC';
                    }
                    _this.Column = column;
                    console.log(_this.Sort);
                    // 以下是在同時確認目前狀態，是搜尋模式還是全部列表
                    if (this.searchItem === '') {
                        _this.getDataPaged(_this.pageNow);
                    } else {
                        _this.searchItem = _this.searchItem.replace(/[^\w\s\u4e00-\u9fa5]/gi, '').replace(/\s+/g, ' ').trim();
                        _this.getDataPaged(1, _this.searchItem, _this.searchColumn);
                    }
                },
                // [ 時間格式轉換 ]
                formatTime(timeStr) {
                    const date = new Date(timeStr);
                    if (isNaN(date.getTime())) {
                        // 時間格式不正確，返回空字串
                        return '';
                    }
                    const year = date.getFullYear();
                    const month = ('0' + (date.getMonth() + 1)).slice(-2);
                    const day = ('0' + date.getDate()).slice(-2);
                    const hours = ('0' + date.getHours()).slice(-2);
                    const minutes = ('0' + date.getMinutes()).slice(-2);
                    const seconds = ('0' + date.getSeconds()).slice(-2);
                    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                },
                // [ 獲取連結的小物 (測試) ]
                linkGetPage: async function () {
                    let _this = this;
                    var getUrlString = location.href;
                    var url = new URL(getUrlString);
                    //console.log(url.searchParams.get('page'));
                    pageNow = url.searchParams.get('page');
                    searchItem = url.searchParams.get('search');
                    if (pageNow === null) {
                        pageNow = 1;
                    }
                    _this.getDataPaged(pageNow);
                },
                // [ 切換頁面Content內容 (C,R,U,D) & 獲取目前編輯資料]
                content(Num, MCNo) {
                    let _this = this;
                    _this.contentNow = Num;
                    // ↓取得目前編輯資料
                    if (MCNo != null) {
                        axios.get(`/api/SystemClass/GetManageClass_ByMCNo/${MCNo}`, {
                            headers: {
                                "Authorization": `Bearer ${token}`
                            }
                        }).then(
                            response => {
                                let _this = this;
                                _this.editMCNo = MCNo;
                                _this.editData = response.data;
                            }
                        ).catch(
                            error => {
                                console.log(error);
                            }
                        );
                    }
                },
                // [ 頁碼產生 ]
                generatePagination() {
                    let _this = this;
                    let pages = [];
                    let startPage, endPage;
                    let totalPages = this.pageTotal.TotalPages;
                    _this.pageNow = this.pageTotal.CurrentPage;

                    if (totalPages <= 5) {
                        startPage = 1;
                        endPage = totalPages;
                    } else {
                        if (_this.pageNow <= 3) {
                            startPage = 1;
                            endPage = 5;
                        } else if (_this.pageNow + 1 >= totalPages) {
                            startPage = totalPages - 4;
                            endPage = totalPages;
                        } else {
                            startPage = _this.pageNow - 2;
                            endPage = _this.pageNow + 2;
                        }
                    }

                    for (let i = startPage; i <= endPage; i++) {
                        pages.push(i);
                    }

                    return pages;

                },
                // ----------------------------------------------------
                // 【 新增 】
                create() {
                    const request = {
                        MCName: this.addData.mCName,
                        MCIcon: this.addData.mCIcon,
                        MCXtrol: this.addData.mCXtrol,
                        MSNo: 1,
                        State: 0,
                        Order: this.addData.order
                    };
                    axios.post(`/api/SystemClass/AddManageClass`, request, {
                        headers: {
                            "Authorization": `Bearer ${token}`
                        }
                    }).then(
                        response => {
                            //_this.CreateControllerFile(_this.addData.mCXtrol)
                            //_this.CreateFolder(_this.addData.mCXtrol);
                            alert("新增成功");
                            window.location = `/Sys/System/Class/`
                        }
                    ).catch(error => alert('您有未完成的內容或填寫錯誤'));
                },
                // ----------------------------------------------------
                // 【 修改 】
                update() {
                    const request = {
                        MCName: this.editData[0].MCName,
                        MCXtrol: this.editData[0].MCXtrol,
                        MCIcon: this.editData[0].MCIcon,
                        Order: this.editData[0].Order
                    };
                    axios.patch(`/api/SystemClass/UpdateManageClass/${this.editMCNo}`, request, {
                        headers: {
                            "Authorization": `Bearer ${token}`
                        }
                    }).then(
                        () => {
                            alert("修改成功");
                            window.location = "/Sys/System/Class/";
                        }
                    ).catch(error => alert("請重新操作"));
                },
                // ----------------------------------------------------
                // 【 刪除 】
                deleteSelected() {
                    if (this.selectAll) {
                        this.checkAll();
                    }
                    // 取得被勾選的項目
                    const selectedItems = this.selectedItems;

                    // 如果沒有項目被勾選，結束函數
                    if (selectedItems.length === 0) {
                        alert('您沒有選擇要刪除的資料')
                        return;
                    }

                    // 將勾選的項目編號做成一個字串
                    const mcnoParams = selectedItems.map(item => `MCNo=${item}`).join('&');

                    // 呼叫 deleteRenderingData 方法
                    this.deleteData(mcnoParams)
                        .then(() => {
                            // 清空 selectedItems 陣列
                            this.selectedItems = [];
                        })
                        .catch((error) => {
                            // 刪除失敗，顯示錯誤訊息
                            console.error(error);
                        });
                },
                /* 批次刪除資料 */
                deleteData(mcnoParams) {
                    //console.log(this.selectedItems);
                    if (confirm("確定要刪除所選擇的資料嗎？")) {
                        axios.delete(`/api/SystemClass/DeleteManageClassBatch/batch?${mcnoParams}`, {
                            headers: {
                                "Authorization": `Bearer ${token}`
                            }
                        })
                            .then(response => {
                                this.getDataPaged(this.pageNow);
                            })
                            .catch(error => {
                                alert('發生不可預期的錯誤');
                            });
                    }
                },
                /* 全選 */
                checkAll() {
                    let delCodes = document.getElementsByName("del_code");
                    let checkAll = document.getElementById("checkAll");
                    for (let i = 0; i < delCodes.length; i++) {
                        delCodes[i].checked = checkAll.checked;
                    }
                    // 更新選取項目的陣列
                    this.selectedItems = checkAll.checked ? this.RenderingData.map(item => item.MCNo) : [];
                },
            },
        }).mount("#ClassVue");
    </script>
}